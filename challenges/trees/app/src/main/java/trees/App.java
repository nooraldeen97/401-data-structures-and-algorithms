/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import javax.naming.BinaryRefAddr;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args) {

//      BinaryTree <String> binaryTree = new BinaryTree<>();
//      Node <String> rootNode=new Node<>("A");
//      Node <String> leftNode=new Node<>("B");
//      Node <String> rightNode=new Node<>("C");
//      Node <String> leftNode2=new Node<>("D");
//      Node <String> rightNode2=new Node<>("E");
//      Node <String> leftNode3=new Node<>("F");
//      binaryTree.root=rootNode;
//      binaryTree.root.left=leftNode;
//      binaryTree.root.right=rightNode;
//      binaryTree.root.left.left=leftNode2;
//      binaryTree.root.left.right=rightNode2;
//      binaryTree.root.right.left=leftNode3;



//      binaryTree.preOrder(binaryTree.root);
//      System.out.println("------");
//      binaryTree.inOrder(binaryTree.root);
//      System.out.println("------");
//
//      ArrayList<String> printResult=binaryTree.postOrder(binaryTree.root);
//      for (int i = 0; i < printResult.size(); i++) {
//        System.out.println(printResult.get(i));
//      }

      BinarySearchTree<Integer> binaryTreeS = new BinarySearchTree<>();
      Node <Integer> rootNode=new Node<>(23);
      Node <Integer> leftNode=new Node<>(8);
      Node <Integer> rightNode=new Node<>(42);
      Node <Integer> leftNode2=new Node<>(4);
      Node <Integer> rightNode2=new Node<>(16);
      Node <Integer> leftNode3=new Node<>(27);
      binaryTreeS.root=rootNode;
      binaryTreeS.root.left=leftNode;
      binaryTreeS.root.right=rightNode;
      binaryTreeS.root.left.left=leftNode2;
      binaryTreeS.root.left.right=rightNode2;
      binaryTreeS.root.right.left=leftNode3;
//
//      binaryTreeS.preOrder(binaryTreeS.root);

//      binaryTreeS.add(23);
//      binaryTreeS.add(8);
//      binaryTreeS.add(42);
//      binaryTreeS.add(4);
//      binaryTreeS.add(16);
//      binaryTreeS.add(27);
      binaryTreeS.add(15);
      binaryTreeS.add(84);
      binaryTreeS.add(85);
      binaryTreeS.add(105);
//      System.out.println("-----");
      binaryTreeS.preOrder(binaryTreeS.root);
            System.out.println("-----");

      System.out.println(binaryTreeS.root.value);


      List<Integer> list = new ArrayList<>();
      list.add(1);
      list.add(2);
      list.add(3);
      list.add(4);
      list.add(5);
      list.add(6);
      list.add(7);
      list.add(8);
      list.add(9);
      list.add(30);
      KAryTree<Integer> kAryTree = new KAryTree<>(list, 3);

//    System.out.println("root " + kArayTree.getRoot().getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getKey());
//    System.out.println(kArayTree.getRoot().getChild(1).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(0).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(1).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(2).getKey());

      kAryTree.postorder(kAryTree.getRoot());
      System.out.println();
      kAryTree.treeFizzBuzz();
      kAryTree.postorder(kAryTree.getRoot());
    }

    }
}
