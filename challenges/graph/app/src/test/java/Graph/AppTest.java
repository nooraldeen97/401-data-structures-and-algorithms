/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Graph;

import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {
// test adding to the Graph.
  @Test
  public void testAddToGraphFunction(){
    Graph graph=new Graph();
      Node node=new Node("C");

    assertEquals(node.toString(),graph.addToGraph("C").toString());
    assertEquals("{Node{C}=[]}",graph.graphsNode.toString());
  }

  //Test An edge can be successfully added to the graph.
  @Test
  public void testAddEdges(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();
    ArrayList<Node > root2=new ArrayList<>();
    Node node1=new Node("C");
    Node node2=new Node("D");


    graph.graphsNode.put(node1,root1);
    graph.graphsNode.put(node2,root2);
    graph.addEdge(node1,node2);
    System.out.println(graph.graphsNode.toString());
    assertEquals("{Node{C}=[Node{D}], Node{D}=[Node{C}]}",graph.graphsNode.toString());

  }

  // Test that A collection of all nodes can be properly retrieved from the graph
  @Test
  public void testGetNodes(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();
    ArrayList<Node > root2=new ArrayList<>();
    Node node1=new Node("C");
    Node node2=new Node("D");
    graph.graphsNode.put(node1,root1);
    graph.graphsNode.put(node2,root2);


    assertEquals("[[Node{C}, Node{D}]]",graph.getNodes().toString());
  }

  //Test that All appropriate neighbors can be retrieved from the graph
  @Test
  public void testGetNeighbors(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();
    ArrayList<Node > root2=new ArrayList<>();
    Node node1=new Node("C");
    Node node2=new Node("D");
    graph.graphsNode.put(node1,root1);
    graph.graphsNode.put(node2,root2);
    root1.add(node2);
    assertEquals(root1,graph.getNeighbors(node1));
  }
//Test the size of the Graph
  @Test
  public void testSize(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();
    ArrayList<Node > root2=new ArrayList<>();
    Node node1=new Node("C");
    Node node2=new Node("D");
    graph.graphsNode.put(node1,root1);
    graph.graphsNode.put(node2,root2);

    assertEquals(2,graph.sizeOfGraph());
  }

  // Test that An empty graph properly returns null
  @Test
  public void testNullGraph(){
    Graph graph=new Graph();

    assertNull(graph.getNodes());
  }

  //Test An edge can be successfully added to the graph with weight.
  @Test
  public void testAddEdgesWithWeight(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();
    ArrayList<Node > root2=new ArrayList<>();
    Node node1=new Node("C");
    Node node2=new Node("D");

    graph.graphsNode.put(node1,root1);
    graph.graphsNode.put(node2,root2);
    graph.addEdge(node1,node2,5);

    assertEquals("{Node{C}=[Node{D  the weight is 5}], Node{D}=[Node{C  the weight is 5}]}",graph.graphsNode.toString());

  }

  // Test that A graph with only one node and edge can be properly returned.
  @Test
  public void testIfOneNodeIsExist(){
    Graph graph=new Graph();

    ArrayList<Node > root1=new ArrayList<>();

    Node node1=new Node("D");

    graph.graphsNode.put(node1,root1);

    assertEquals("[[Node{D}]]",graph.getNodes().toString());
  }


}
